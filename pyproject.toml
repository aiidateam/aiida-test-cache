[build-system]
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[tool.flit.module]
name = "aiida_test_cache"

[project]
name = "aiida-test-cache"
version = "0.0.1"
description = "A pytest plugin to simplify testing of AiiDA workflows"
authors = [
    {name = "Dominik Gresch"},
    {name = "Leopold Talirz"},
    {name = "Jens Bröder"},
    {name = "Philipp Rüßmann"},
    {name = "AiiDA team"},
]
license = {file = "LICENSE.txt"}
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Plugins",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Framework :: AiiDA",
    "Framework :: Pytest",
]
keywords = [
    "AiiDA",
    "testing",
    "pytest",
    "mock",
    "cache",
]
urls = {Homepage = "https://aiida-testing.readthedocs.io/"}
requires-python = ">=3.9"
dependencies = [
    "aiida-core>=1.0.0,<3",
    "pytest>=7.0",
    "voluptuous~=0.12",
]

[project.optional-dependencies]
docs = ["sphinx", "sphinx-rtd-theme"]
tests = [
    "pgtest~=1.3.1",
    "aiida-diff~=2.0.0",
    "pytest-datadir",
    "pytest-mock",
    "pytest-cov>=4.0",
]
pre_commit = [
    "pre-commit",
    "mypy==1.13",
    "types-PyYAML",
]
dev = [
    'aiida-test-cache[tests,pre_commit,docs]',
]

[project.scripts]
aiida-mock-code = "aiida_test_cache.mock_code._cli:run"

[project.entry-points."pytest11"]
aiida_mock_code = "aiida_test_cache.mock_code"
aiida_archive_cache = "aiida_test_cache.archive_cache"

[tool.pytest.ini_options]
addopts = '--durations=10 --durations-min=3 --strict-config --strict-markers -ra --cov-report xml --cov-append'
filterwarnings = [
    'ignore:Creating AiiDA configuration:UserWarning:aiida',
]

[tool.yapf]
based_on_style = "pep8"
coalesce_brackets = true
dedent_closing_brackets = true
column_limit = 100

[tool.ruff]
line-length = 130
show-fixes = true

[tool.ruff.lint]
ignore = ["E501", "TRY003"]
select = [
  "A",    # flake8-builtins
  "ARG",  # flake8-unused-arguments
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "E",    # pycodestyle
  "F",    # pyflakes
  "I",    # isort
  "N",    # pep8-naming
  "PLE",  # pylint error rules
  "PLW",  # pylint warning rules
  "PLC",  # pylint convention rules
  "RUF",  # ruff-specific rules
  "TRY",  # Tryceratops
  "UP"    # pyupgrade
]

[tool.ruff.lint.per-file-ignores]
"tests/archive_cache/test_archive_cache.py" = ["ARG001"]

[tool.mypy]
show_error_codes = true
# Strictness settings
disallow_any_unimported = true
disallow_subclassing_any = true
disallow_untyped_calls = false
disallow_untyped_decorators = true
no_implicit_optional = true
no_strict_optional = false
# Enable all warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
allow_untyped_globals = false
strict_equality = true

[[tool.mypy.overrides]]
module = ["voluptuous.*"]
ignore_missing_imports = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39

[testenv]
usedevelop = true

[testenv:py{39,310,311,312}]
extras = tests
commands = pytest {posargs}

[testenv:pre-commit-py{39,310,311,312}]
extras = 
    pre_commit
commands = pre-commit {posargs:run --all}
"""
